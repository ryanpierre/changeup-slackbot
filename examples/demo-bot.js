///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
//         SET UP / MIDDLEWARE         ////
///////////////////////////////////////////

/*
   /*_/|         /^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
   =0-0=      <:(       DON'T CHANGE THIS :)     )
   \'I'|         \............................../
   |<|,,\_
   |[>,,/,\ 
   |[|,\_,,)
   ((J(=_*/

const Express = require('express');
const Webtask = require('webtask-tools');
const request = require('superagent');
const logger = require('loggerithm')();
const app = Express();

//Use body parser middleware for json
app.use(require('body-parser').json());

//Check if it's a challenge request for initializing a bot
const challengeCheck = (req, res, next) => {
    if(req.body.challenge) {
        return res.json({ challenge: req.body.challenge });
    }

    return next();
}

//Check if l33t haxx0rs are trying to mess with your bot!
const sanitizeInput = (req, res, next) => {
    return next();
}

app.use(challengeCheck);
app.use(sanitizeInput);

///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
//           HELPER FUNCTIONS          ////
///////////////////////////////////////////

/*
   /*_/|         /^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
   =0-0=      <:(       DON'T CHANGE THIS :)     )
   \'I'|         \............................../
   |<|,,\_
   |[>,,/,\ 
   |[|,\_,,)
   ((J(=_*/

app.post('/', (req, res) => {

    const auth = `Bearer ${req.webtaskContext.data.BOT_TOKEN}`;

    //Message context used to make writing code easier
    let _context = {};

    const createBotResponse = (options) => {
        resetContext();
        _context["options"] = parseOptions(options);

        if(_context.options.logMessage && _context.options.logMessage === true ) {
            logMessageBody(req.body);
        }
    }

    const resetContext = () => {
        _context = {};
    }

    const parseOptions = (options) => {

        return options;
    }

    const logMessageBody = (requestBody) => {
        logger.log("info", "YOUR BOT TOKEN IS: " + `${req.webtaskContext.data.BOT_TOKEN}`.output);
        logger.log("request", "THE MESSAGE YOUR BOT RECEIVED IS: ")
        logger.output(parseMessageBody(requestBody));
    }

    const logBotResponse = (responseBody) => {
        logger.log("response", "YOUR BOT RESPONDED WITH: ");
        logger.output(parseMessageBody(responseBody));
    }

    const parseBotResponse = (responseBody) => {
        return responseBody;
    }

    const parseMessageBody = (requestBody) => {
        return requestBody;
    }

    const validateRequest = () => {

        if(_context.options.noBots && _context.options.noBots === true) {
            if(!req.body.event.subtype || req.body.event.subtype != 'bot_message') {
                //Need to invert this
            }
            else {
                return false;
            }
        }

        return true;

    }

    const buildBasicMessage = (message) => {
        _context["message"] = {
            "token" : `${req.body.token}`,
            "channel" : `${req.body.event.channel}`,
            "text" : `${message}`
        };
    }

    const sendMessageToUser = () => {
        if(validateRequest() === true) {
            request
            .post('https://slack.com/api/chat.postMessage')
            .set('Content-Type', "application/json; charset=utf-8")
            .set('Authorization', auth)
            .send(_context["message"])
            .then( (response) => {
                if(_context.options.logResponse && _context.options.logResponse === true) {
                    logBotResponse(response.body);
                }
            })
            .catch( (error) => {
                logger.log("error", error);
            });
        }
    }

///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////

/*
   /*_/|         /^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
   =0-0=      <:(   HI! WRITE SOME CODE HERE     )
   \'I'|         \............................../
   |<|,,\_
   |[>,,/,\ 
   |[|,\_,,)
   ((J(=_*/

///////////////////////////////////////////
//          v  YOUR CODE HERE  v       ////
///////////////////////////////////////////

createBotResponse({noBots: true, logMessage: true, logResponse: true});
buildBasicMessage("Hello I've received your message!");
sendMessageToUser();

///////////////////////////////////////////
//           ^ YOUR CODE HERE ^        ////
///////////////////////////////////////////

/*
    ("`-''-/").___..--''"`-._ 
    `6_ 6  )   `-.  (     ).`-.__.`) 
    (_Y_.)'  ._   )  `._ `. ``-..-`  
    _..`--'_..-_/  /--'_.' ,'  
    (il),-''  (li),'  ((!.-'
*/

///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////

/*
   /*_/|         /^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
   =0-0=      <:(       DON'T CHANGE THIS :)     )
   \'I'|         \............................../
   |<|,,\_
   |[>,,/,\ 
   |[|,\_,,)
   ((J(=_*/

    return res.status(200).send("All good.");
});

module.exports = Webtask.fromExpress(app);

///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////

